%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: Viscous optimization of CRMWS configuration   %
% Author: Prateek Ranjan	         	       	       %
% Institution: Massachusetts Institute of Technology	                                       %
% Date: 12.1.2020                                                             %
% File Version 6.0.0                                                   %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Physical governing equations (EULER, NAVIER_STOKES,
%                               WAVE_EQUATION, HEAT_EQUATION, FEM_ELASTICITY,
%                               POISSON_EQUATION)
SOLVER= RANS
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT, DISCRETE_ADJOINT)
MATH_PROBLEM= DIRECT
%
% Restart solution (NO, YES)
RESTART_SOL= YES
KIND_TURB_MODEL = SA
SA_OPTIONS = NEGATIVE, WITHFT2, ROTATION, COMPRESSIBILITY, QCR2000
% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.85
%
% Angle of attack (degrees)
AOA=2.3

FREESTREAM_OPTION= TEMPERATURE_FS

% Free-stream pressure (101325.0 N/m^2 by default, only for Euler equations)
%FREESTREAM_PRESSURE= 26500
%
% Free-stream temperature (288.15 K by default)
FREESTREAM_TEMPERATURE= 288.15

INIT_OPTION= REYNOLDS

REYNOLDS_LENGTH= 1
REYNOLDS_NUMBER=5E6


% -------------------------- CL DRIVER DEFINITION -----------------------------%
%
% Activate fixed lift mode (specify a CL instead of AoA, NO/YES)
FIXED_CL_MODE= YES
%
% Target coefficient of lift for fixed lift mode (0.80 by default)
TARGET_CL= 0.5
%
% Estimation of dCL/dAlpha (0.2 per degree by default)
DCL_DALPHA= 0.14
%
% Number of times the AoA is updated in a fix CL problem ( 5 by default)
UPDATE_AOA_ITER_LIMIT = 30000
%
% Number of iterations to evaluate dCL_dAlpha by using finite differences (500 by default)
ITER_DCL_DALPHA= 0

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation
REF_ORIGIN_MOMENT_X = 4.4688197
REF_ORIGIN_MOMENT_Y = 0
REF_ORIGIN_MOMENT_Z = 0.645213923
%
% Reference length for pitching, rolling, and yawing non-dimensional moment
REF_LENGTH= 1
%
% Reference area for force coefficients (0 implies automatic calculation)
REF_AREA= 0
%
% Flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= FREESTREAM_VEL_EQ_ONE

% ----------------------- BOUNDARY CONDITION DEFINITION -----------------------%
%
% Marker of the Euler boundary (0 implies no marker)
MARKER_HEATFLUX= ( wing, 0.0, fuselage, 0.0, pylon, 0.0, engine, 0.0, tail, 0.0 )
%
% Marker of the far field (0 implies no marker)
MARKER_FAR= ( farfield )
%
% Marker of symmetry boundary (0 implies no marker)
MARKER_SYM= ( sym )
%
% Marker of the surface which is going to be plotted or designed
MARKER_PLOTTING= (engine,wing, fuselage, pylon, tail, nacelle)
%
% Marker of the surface where the functional (Cd, Cl, etc.) will be evaluated
MARKER_MONITORING= ( wing )

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS
%
% Objective function in gradient evaluation  (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                             MOMENT_Y, MOMENT_Z, EFFICIENCY,
%                                             EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                             FORCE_X, FORCE_Y, FORCE_Z, THRUST,
%                                             TORQUE, FREE_SURFACE, TOTAL_HEATFLUX,
%                                             MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,
%                                             INVERSE_DESIGN_HEATFLUX)
OBJECTIVE_FUNCTION= DRAG
%
% Courant-Friedrichs-Lewy condition of the finest grid
CFL_NUMBER= 10
%
% Number of total iterations
INNER_ITER= 50000

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver for the implicit formulation (BCGSTAB, FGMRES)
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (JACOBI, ILU, LINELET, LU_SGS)
LINEAR_SOLVER_PREC= ILU
%
% Min error of the linear solver for the implicit formulation
LINEAR_SOLVER_ERROR= 1E-6
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 30

% --------------------- FLOW NUMERICAL METHOD DEFINITION ----------------------%
% Convective numerical method: (JST, LAX-FRIEDRICH, ROE-1ST_ORDER,
%                               ROE-2ND_ORDER)
CONV_NUM_METHOD_FLOW= JST
%
% 2nd and 4th order artificial dissipation coefficients
JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT


% ----------------- TURBULENT NUMERICAL METHOD DEFINITION --------------------%

% Convective numerical method ( SCALAR UPWIND )

CONV_NUM_METHOD_TURB= SCALAR_UPWIND
MUSCL_TURB= NO
SLOPE_LIMITER_TURB= VENKATAKRISHNAN
TIME_DISCRE_TURB= EULER_IMPLICIT

% ----------------- ADJOINT-FLOW NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method: (JST, LAX-FRIEDRICH, ROE-1ST_ORDER,
%                               ROE-2ND_ORDER)
CONV_NUM_METHOD_ADJFLOW= JST
%
% 2nd, and 4th order artificial dissipation coefficients
ADJ_JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% Reduction factor of the CFL coefficient in the adjoint problem
CFL_REDUCTION_ADJFLOW= 0.75
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT)
TIME_DISCRE_ADJFLOW= EULER_IMPLICIT

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Marker(s) of the surface where geometrical based function will be evaluated
GEO_MARKER= ( wing )
%
% Description of the geometry to be analyzed (AIRFOIL, WING, FUSELAGE)
GEO_DESCRIPTION= WING
%
% Coordinate of the stations to be analyzed
GEO_LOCATION_STATIONS= (0.45, 0.56572414, 0.69444828, 0.82317241, 0.95189655, 1.08062069, 1.20934483, 1.33806897, 1.4667931,  1.59551724, 1.72424138, 1.85296552,1.98168966, 2.11041379, 2.23913793, 2.36786207, 2.49658621, 2.62531034,  2.75403448, 2.88275862, 3.01148276, 3.1402069,  3.26893103, 3.39765517,  3.52637931, 3.65510345, 3.78382759, 3.91255172, 4.04127586, 4.17 )
%
% Geometrical bounds (Y coordinate) for the wing geometry analysis or
% fuselage evaluation (X coordinate)
GEO_BOUNDS= (0.4360116, 4.1802139)

% Plot loads and Cp distributions on each airfoil section
GEO_PLOT_STATIONS= YES
%
% Number of section cuts to make when calculating wing geometry
GEO_NUMBER_STATIONS= 30
%
% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= FUNCTION

% --------------------------- CONVERGENCE PARAMETERS --------------------------&
%
% Convergence criteria (CAUCHY, RESIDUAL)
%CONV_FIELD= DRAG
%
% Residual reduction ( order of magnitude with respect to the initial value)

% RESIDUAL_REDUCTION = 5

% Min value of the residual ( log10 of the residual )

CONV_RESIDUAL_MINVAL= -10

% Start convergence criteria at iteration number
CONV_STARTITER = 10

% Nuber of elements to apply the criteria
CONV_CAUCHY_ELEMS= 100

% Epsilon to control the series convergence
CONV_CAUCHY_EPS =1E-8


% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= CRMNS_M01.su2
%
% Mesh output file
MESH_OUT_FILENAME= CRMS_M00_DEF.su2
%
% Restart flow input file

SOLUTION_FILENAME= restart_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Mesh input file format (SU2)
MESH_FORMAT= SU2
%
% Output tabular format (CSV, TECPLOT)
TABULAR_FORMAT= TECPLOT
%
% Output file convergence history
CONV_FILENAME= history
%
% Output file restart flow

RESTART_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output Objective function gradient (using continuous adjoint)
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Writing solution file frequency
%WRT_SOL_FREQ= 100
%
% Writing solution file frequency for physical time steps (dual time)
%WRT_SOL_FREQ_DUALTIME= 1
%
% Writing convergence history frequency
%WRT_CON_FREQ= 1
%
% Writing convergence history frequency (dual time, only written to screen)
%WRT_CON_FREQ_DUALTIME= 10
%
% Screen output
SCREEN_OUTPUT= (INNER_ITER, RMS_DENSITY, RMS_ENERGY, LIFT, DRAG, MOMENT_Y)
%
% Output files
OUTPUT_FILES= (RESTART, PARAVIEW, SURFACE_PARAVIEW, SURFACE_CSV)

% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FFD_DEFINITION= (WING,3.240394443,0.436011488,-0.356871635, 4.967653155, 0.436011488,-0.356871635,    6.537888348,4.225360155,0.157023519,6.109642386,4.225360155,0.157023519,3.240394443,0.436011488,0, 4.967653155,0.436011488,0, 6.537888348,4.225360155,0.285497308, 6.109642386,4.225360155,0.285497308)        
% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
FFD_DEGREE= (7, 20, 1)
%
% Surface grid continuity at the intersection with the faces of the FFD boxes.
% To keep a particular level of surface continuity, SU2 automatically freezes the right
% number of control point planes (NO_DERIVATIVE, 1ST_DERIVATIVE, 2ND_DERIVATIVE, USER_INPUT)
FFD_CONTINUITY= 2ND_DERIVATIVE
%
% There is a symmetry plane (j=0) for all the FFD boxes (YES, NO)
FFD_SYMMETRY_PLANE= NO

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (FFD_SETTING, FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D,
%                      HICKS_HENNE, COSINE_BUMP, PARABOLIC,
%                      NACA_4DIGITS, DISPLACEMENT, ROTATION, FFD_CONTROL_POINT,
%                      FFD_DIHEDRAL_ANGLE, FFD_TWIST_ANGLE, FFD_ROTATION,
%                      FFD_CAMBER, FFD_THICKNESS, FFD_CONTROL_SURFACE, SURFACE_FILE, AIRFOIL)
DV_KIND= FFD_SETTING
%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( wing )
%
% Parameters of the shape deformation
% 	- FFD_CONTROL_POINT ( FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
% 	- FFD_DIHEDRAL_ANGLE ( FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% 	- FFD_TWIST_ANGLE ( FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% 	- FFD_ROTATION ( FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% 	- FFD_CAMBER ( FFD_BoxTag, i_Ind, j_Ind )
% 	- FFD_THICKNESS ( FFD_BoxTag, i_Ind, j_Ind )
% 	- FFD_VOLUME ( FFD_BoxTag, i_Ind, j_Ind )
DV_PARAM= ( WING, 1, 0, 0, 0.0, 0.0, 1.0 )
%
% New value of the shape deformation
DV_VALUE= 0.0

% FFD Blending function: Bezier curves with global support (BEZIER), uniform BSplines with local support (BSPLINE_UNIFORM)
% FFD_BLENDING= BEZIER
%
% Order of the BSplines
% FFD_BSPLINE_ORDER= 4, 4, 4

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES, BCGSTAB)
DEFORM_LINEAR_SOLVER= FGMRES
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_SOLVER_ITER= 500
%
% Minimum residual criteria for the linear solver convergence of grid deformation
DEFORM_LINEAR_SOLVER_ERROR= 1E-14
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME,
%                                          WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= WALL_DISTANCE

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Available flow based objective functions or constraint functions
%    DRAG, LIFT, SIDEFORCE, EFFICIENCY, BUFFET,
%    FORCE_X, FORCE_Y, FORCE_Z,
%    MOMENT_X, MOMENT_Y, MOMENT_Z,
%    THRUST, TORQUE, FIGURE_OF_MERIT,
%    EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%    TOTAL_HEATFLUX, MAXIMUM_HEATFLUX,
%    INVERSE_DESIGN_PRESSURE, INVERSE_DESIGN_HEATFLUX,
%    SURFACE_TOTAL_PRESSURE, SURFACE_MASSFLOW
%    SURFACE_STATIC_PRESSURE, SURFACE_MACH
%
% Available geometrical based objective functions or constraint functions
%    AIRFOIL_AREA, AIRFOIL_THICKNESS, AIRFOIL_CHORD, AIRFOIL_TOC, AIRFOIL_AOA,
%    WING_VOLUME, WING_MIN_THICKNESS, WING_MAX_THICKNESS, WING_MAX_CHORD, WING_MIN_TOC, WING_MAX_TWIST, WING_MAX_CURVATURE, WING_MAX_DIHEDRAL
%    STATION#_WIDTH, STATION#_AREA, STATION#_THICKNESS, STATION#_CHORD, STATION#_TOC,
%    STATION#_TWIST (where # is the index of the station defined in GEO_LOCATION_STATIONS)
%
% Available design variables
% 2D Design variables
%    FFD_CONTROL_POINT_2D   (  19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov )
%    FFD_CAMBER_2D          (  20, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_THICKNESS_2D       (  21, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_TWIST_2D           (  22, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig )
%    HICKS_HENNE            (  30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc )
%    ANGLE_OF_ATTACK        ( 101, Scale | Mark. List | 1.0 )
%
% 3D Design variables
%    FFD_CONTROL_POINT      (  11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov )
%    FFD_NACELLE            (  12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov )
%    FFD_GULL               (  13, Scale | Mark. List | FFD_BoxTag, j_Ind )
%    FFD_CAMBER             (  14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_TWIST              (  15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%    FFD_THICKNESS          (  16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_ROTATION           (  18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%    FFD_ANGLE_OF_ATTACK    (  24, Scale | Mark. List | FFD_BoxTag, 1.0 )
%
% Global design variables
%    TRANSLATION            (   1, Scale | Mark. List | x_Disp, y_Disp, z_Disp )
%    ROTATION               (   2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%
% Optimization objective function with scaling factor
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG
%
% Optimization constraint functions with scaling factors, separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= (STATION1_THICKNESS > 0.057464) * 0.1; (STATION2_THICKNESS > 0.05289275) * 0.1; (STATION3_THICKNESS > 0.04818425) * 0.1; (STATION4_THICKNESS >0.0440705 ) * 0.1; (STATION5_THICKNESS > 0.04037025) * 0.1; (STATION6_THICKNESS > 0.037052) * 0.1; (STATION7_THICKNESS > 0.034057) * 0.1; (STATION8_THICKNESS > 0.03131375) * 0.1; (STATION9_THICKNESS > 0.02880025) * 0.1; (STATION10_THICKNESS > 0.0268305) * 0.1; (STATION11_THICKNESS > 0.02567575) * 0.1; (STATION12_THICKNESS > 0.024581875) * 0.1; (STATION13_THICKNESS > 0.023491475) * 0.1; (STATION14_THICKNESS > 0.022432475) * 0.1; (STATION15_THICKNESS > 0.02144785) * 0.1; (STATION16_THICKNESS > 0.020562475) * 0.1; (STATION17_THICKNESS > 0.0196909) * 0.1; (STATION18_THICKNESS > 0.0188323) * 0.1; (STATION19_THICKNESS > 0.017976825) * 0.1; (STATION20_THICKNESS > 0.017121275 ) * 0.1; (STATION21_THICKNESS > 0.01630365 ) * 0.1; (STATION22_THICKNESS > 0.015514775) * 0.1; (STATION23_THICKNESS > 0.01473015) * 0.1; (STATION24_THICKNESS > 0.013948875) * 0.1; (STATION25_THICKNESS > 0.013180225 ) * 0.1; (STATION26_THICKNESS > 0.0124222 ) * 0.1; (STATION27_THICKNESS > 0.011658125 ) * 0.1; (STATION28_THICKNESS > 0.010913275 ) * 0.1; (STATION29_THICKNESS > 0.01015715  ) * 0.1; (STATION30_THICKNESS > 0.00940955 ) * 0.1;  (WING_VOLUME > 0.250821) * 0.1; (MOMENT_Y = -0.17) * 0.1
%
% Factor to reduce the norm of the gradient (affects the objective function and gradient in the python scripts)
% In general, a norm of the gradient ~1E-6 is desired.
OPT_GRADIENT_FACTOR= 1

OPT_LINE_SEARCH_BOUND=1E-1
%
% Factor to relax or accelerate the optimizer convergence (affects the line search in SU2_DEF)
% In general, surface deformations of 0.01'' or 0.0001m are desirable
OPT_RELAX_FACTOR= 1
%
% Maximum number of iterations
OPT_ITERATIONS= 500


% Requested accuracy
OPT_ACCURACY= 1E-8
%
% Upper bound for each design variable
OPT_BOUND_UPPER= 1
%
% Lower bound for each design variable
OPT_BOUND_LOWER= -1

% FFD_CONTROL_POINT (Z)
DEFINITION_DV= ( 11, 1.0 | wing | WING, 0, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 9, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 10, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 11, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 12, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 13, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 14, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 15, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 16, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 17, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 18, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 19, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 20, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 9, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 10, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 11, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 12, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 13, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 14, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 15, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 16, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 17, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 18, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 19, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 0, 20, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 1, 20, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 2, 20, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 3, 20, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 4, 20, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 5, 20, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 6, 20, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | wing | WING, 7, 20, 1, 0.0, 0.0, 1.0 )




