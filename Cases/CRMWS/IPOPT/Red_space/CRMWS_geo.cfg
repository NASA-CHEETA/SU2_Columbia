%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: Viscous optimization of CRMWS configuration                        %
% Author: P. Ranjan                                                     %
% Institution: MIT                                      %
% Date: 07/1/2023                                                             %
% File Version 7.5.1 "Blackbird"                                               %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
SOLVER= RANS
KIND_TURB_MODEL= SA
%
OBJECTIVE_FUNCTION= TOPOL_COMPLIANCE

% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.85
% Angle of attack (degrees, only for compressible flows)
AOA= 2.3
% Side-slip angle (degrees, only for compressible flows)
SIDESLIP_ANGLE= 0.0
%
% Init option to choose between Reynolds (default) or thermodynamics quantities
% for initializing the solution (REYNOLDS, TD_CONDITIONS)
INIT_OPTION= REYNOLDS
%
% Free-stream option to choose between density and temperature (default) for
% initializing the solution (TEMPERATURE_FS, DENSITY_FS)
FREESTREAM_OPTION= TEMPERATURE_FS
%
% Free-stream temperature (288.15 K by default)
FREESTREAM_TEMPERATURE= 288.15

REYNOLDS_LENGTH= 1
REYNOLDS_NUMBER=5E6

% ---- IDEAL GAS, POLYTROPIC, VAN DER WAALS AND PENG ROBINSON CONSTANTS -------%
%
% Different gas model (STANDARD_AIR, IDEAL_GAS, VW_GAS, PR_GAS)
FLUID_MODEL= STANDARD_AIR
%
% Ratio of specific heats (1.4 default and the value is hardcoded
%                          for the model STANDARD_AIR)
GAMMA_VALUE= 1.4
%
% Specific gas constant (287.058 J/kg*K default and this value is hardcoded
%                        for the model STANDARD_AIR)
GAS_CONSTANT= 287.058


% --------------------------- THERMAL CONDUCTIVITY MODEL ----------------------%
%
% Conductivity model (CONSTANT_CONDUCTIVITY, CONSTANT_PRANDTL).
CONDUCTIVITY_MODEL= CONSTANT_PRANDTL
%
% Laminar Prandtl number (0.72 (air), only for CONSTANT_PRANDTL)
PRANDTL_LAM= 0.71
%
% Turbulent Prandtl number (0.9 (air), only for CONSTANT_PRANDTL)
PRANDTL_TURB= 0.90

% -------------------------- CL DRIVER DEFINITION -----------------------------%
%
% Activate fixed lift mode (specify a CL instead of AoA, NO/YES)
FIXED_CL_MODE= YES
%
% Target coefficient of lift for fixed lift mode (0.80 by default)
TARGET_CL= 0.5
%
% Estimation of dCL/dAlpha (0.2 per degree by default)
DCL_DALPHA= 0.13087
%
% Maximum number of iterations between AoA updates
UPDATE_AOA_ITER_LIMIT= 1000
%
% Number of iterations to evaluate dCL/dAlpha at the end of the simulation
ITER_DCL_DALPHA= 800
%
% Evaluate dObjFunc/dCL during runtime (YES) or use the value stored in the
% direct solution file (NO).
EVAL_DOF_DCX= YES

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation
REF_ORIGIN_MOMENT_X = 1.2077
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.007669


% Reference length for pitching, rolling, and yawing non-dimensional moment
REF_LENGTH= 1
%
% Reference area for force coefficients (0 implies automatic calculation)
REF_AREA= 3.407014
%
% Compressible flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= DIMENSIONAL

% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Marker of the Euler boundary (0 implies no marker)
MARKER_HEATFLUX= ( wing, 0.0 )
%
% Marker of the far field (0 implies no marker)
MARKER_FAR= ( farfield )
%
% Marker of symmetry boundary (0 implies no marker)
MARKER_SYM= ( sym )
%
% Marker of the surface which is going to be plotted or designed
MARKER_PLOTTING= ( wing )
%
% Marker of the surface where the functional (Cd, Cl, etc.) will be evaluated
MARKER_MONITORING= ( wing )


% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS
%
% Courant-Friedrichs-Lewy condition of the finest grid
%__DIRECT__CFL_NUMBER= 100
%__ADJOINT__CFL_NUMBER=10

% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor down, factor up, CFL min value,
%                                        CFL max value )
CFL_ADAPT_PARAM= ( 0.5, 1.5, 1.0, 100.0 )
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Number of total iterations
ITER= 10000

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver for the implicit (or discrete adjoint) formulation (BCGSTAB, FGMRES)
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (NONE, JACOBI, LINELET)
LINEAR_SOLVER_PREC= ILU
%
% Min error of the linear solver for the implicit formulation
LINEAR_SOLVER_ERROR= 1E-6
%
% Max number of iterations of the linear solver for the implicit formulation
%__DIRECT__LINEAR_SOLVER_ITER= 10

%__ADJOINT__LINEAR_SOLVER_ITER= 20

% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-Grid Levels (0 = no multi-grid)
%__DIRECT__MGLEVEL= 2
%
% Multi-grid cycle (V_CYCLE, W_CYCLE, FULLMG_CYCLE)
%__DIRECT__MGCYCLE= V_CYCLE

%__ADJOINT__MGCYCLE=V_CYCLE

%__ADJOINT__MGLEVEL= 0


% Multi-grid pre-smoothing level
MG_PRE_SMOOTH= ( 1, 1, 1, 1 )
%
% Multi-grid post-smoothing level
MG_POST_SMOOTH= ( 0, 0, 0, 0 )
%
% Jacobi implicit smoothing of the correction
MG_CORRECTION_SMOOTH= ( 0, 0, 0, 0 )
%
% Damping factor for the residual restriction
MG_DAMP_RESTRICTION= 0.7
%

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, HLLC,
%                              TURKEL_PREC, MSW)
CONV_NUM_METHOD_FLOW= JST


% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT

% -------------------- TURBULENT NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_TURB= SCALAR_UPWIND
%

%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_TURB= EULER_IMPLICIT

% --------------------------- CONVERGENCE PARAMETERS --------------------------%
%
% Convergence criteria (CAUCHY, RESIDUAL)
%CONV_FIELD= DRAG

% Min value of the residual (log10 of the residual)
CONV_RESIDUAL_MINVAL= -9

% Start convergence criteria at iteration number
CONV_STARTITER= 10
%
% Number of elements to apply the criteria
CONV_CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CONV_CAUCHY_EPS= 1E-4

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Marker(s) of the surface where geometrical based function will be evaluated
GEO_MARKER= ( wing )
%
% Description of the geometry to be analyzed (AIRFOIL, WING, FUSELAGE)
GEO_DESCRIPTION= WING


% Coordinate of the stations to be analyzed
GEO_LOCATION_STATIONS= (0,0.12997862,0.25995724,0.38993586,0.51991448,0.6498931,0.77987172,0.90985034,1.03982897,1.16980759,1.29978621,1.42976483,1.55974345,1.68972207,1.81970069,1.94967931,2.07965793,2.20963655,2.33961517,2.46959379,2.59957241,2.72955103,2.85952966,2.98950828,3.1194869,3.24946552,3.37944414,3.50942276,3.63940138,3.76930)

GEO_BOUNDS= (0, 3.76937)

GEO_NUMBER_STATIONS= 30


% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= GRADIENT


% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= CRMWS_M0_FFD_def.su2
%
% Mesh input file format (SU2, CGNS, NETCDF_ASCII)
MESH_FORMAT= SU2
%
% Mesh output file
MESH_OUT_FILENAME= CRMWS_M0_FFD_def.su2

GRAD_OBJFUNC_FILENAME= of_grad.dat
%__DIRECT__SOLUTION_FILENAME= restart.dat
%__ADJOINT__SOLUTION_FILENAME= solution.dat
RESTART_FILENAME= solution.dat
RESTART_ADJ_FILENAME= solution_adj.dat
WRT_ZONE_CONV= YES
WRT_ZONE_HIST= YES
OUTPUT_WRT_FREQ= 1000
RESTART_SOL= NO



%
% Output file flow (w/o extension) variables
VOLUME_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%

%
% Writing convergence history frequency
%WRT_CON_FREQ= 1
%
% Direct Screen output
%__DIRECT__SCREEN_OUTPUT= (INNER_ITER, WALL_TIME, RMS_DENSITY, RMS_NU_TILDE, LIFT, DRAG, MOMENT_Y, LINSOL_ITER, LINSOL_RESIDUAL)

% Adjont Screen output
%__ADJOINT__SCREEN_OUTPUT= (INNER_ITER, WALL_TIME, RMS_DENSITY, RMS_NU_TILDE, LINSOL_ITER, LINSOL_RESIDUAL)

%__DIRECT__HISTORY_OUTPUT= ITER, RMS_RES, AERO_COEFF, LINSOL
%__ADJOINT__HISTORY_OUTPUT= ITER, RMS_RES, SENSITIVITY, LINSOL


% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)

FFD_DEFINITION= (WING_INNER,-0.02,0,-0.25,  1.71,0,-0.25,   1.9 ,1.117125 ,-0.1,    0.8193188, 1.1171215,-0.1,  -0.02,0,0.1,    1.71,0,0.1, 1.9,1.1171215,0.1,  0.8193188,1.1171215,0.18866044); (WING_OUTER,   0.8193188,1.117125,-0.1, 1.9,1.117125,-0.1,   3.3,3.78,0.2,   2.82,3.78,0.2,  0.8193188,1.117125,0.18866044,   1.9,1.117125,0.1,    3.3,3.78,0.4,   2.82,3.78,0.4 )

% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
FFD_DEGREE= (7, 6, 1); (7, 14, 1)
%
% Surface grid continuity at the intersection with the faces of the FFD boxes.
% To keep a particular level of surface continuity, SU2 automatically freezes the right
% number of control point planes (NO_DERIVATIVE, 1ST_DERIVATIVE, 2ND_DERIVATIVE, USER_INPUT)
FFD_CONTINUITY= USER_INPUT

% There is a symmetry plane (j=0) for all the FFD boxes (YES, NO)
FFD_SYMMETRY_PLANE= YES
DEFORM_CONSOLE_OUTPUT=YES

FFD_BLENDING=BEZIER



% Definition of the FFD planes to be frozen in the FFD (x,y,z).
% Value from 0 FFD degree in that direction. Pick a value larger than degree if you don't want to fix any plane.
% FFD_FIX_I= (0,11)
% FFD_FIX_J= (15)
% FFD_FIX_K= (15)

% Use the reformatted pseudo-elastic solver for grid deformation
DEFORM_MESH= YES


FFD_CONTROL_POINT



% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME,
%                                           WALL_DISTANCE, CONSTANT_STIFFNESS)

DEFORM_STIFFNESS_TYPE= WALL_DISTANCE

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
% Kind of deformation (FFD_SETTING, FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D,
%                      HICKS_HENNE, PARABOLIC,
%                      NACA_4DIGITS, DISPLACEMENT, ROTATION, FFD_CONTROL_POINT,
%                      FFD_NACELLE, FFD_TWIST, FFD_ROTATION,
%                      FFD_CAMBER, FFD_THICKNESS, SURFACE_FILE)


% Marker of the surface to which we are going apply the shape deformation
DV_MARKER= (wing)

DV_PARAM =   (WING_INNER , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  );  (WING_INNER , 1.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 1.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 2.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 3.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 4.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 5.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_INNER , 6.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  );  (WING_OUTER , 1.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 1.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 2.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 3.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 4.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 5.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); (WING_OUTER , 6.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  )


DV_VALUE =  0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001

DEFINITION_DV= ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 0.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 1.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 2.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 3.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 4.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 5.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 6.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_INNER , 7.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 2.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 3.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 4.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 5.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 6.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 7.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 8.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 9.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 10.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 11.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 12.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 13.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 14.0 , 0.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 0.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 1.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 2.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 4.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 5.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 6.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 7.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 8.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 9.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 10.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 11.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 12.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 1c3.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 13.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 0.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 1.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 2.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 3.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 4.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 5.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 6.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  ); ( 11 , 1.0 | wing  | WING_OUTER , 7.0 , 14.0 , 1.0 , 0.0 , 0.0 , 1.0  )
